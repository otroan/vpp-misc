# Copyright 2015, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

"""The Python implementation of the gRPC route guide server."""

from concurrent import futures
import time
import fnmatch
import grpc
import os
from google.protobuf import descriptor

import vpe_pb2
import vpe_pb2_grpc
from vpp_papi import VPP

_ONE_DAY_IN_SECONDS = 60 * 60 * 24

def grpcmsg_to_namedtuple(obj):
  pr = {}
  for i in obj.DESCRIPTOR.fields:
    value = getattr(obj, i.name)
    if not i.name in ["_vl_msg_id", "context", "client_index"]:
     pr[i.name] = value
  return(pr)
   
def vppmsg_to_namedtuple(obj):
  pr = {}
  for name,value in obj.__dict__.iteritems():
    if not name.startswith('_'):
      pr[name] = value
  return pr
                                            
# This class and all the defs within will be autogenerated
class vpeServicer(vpe_pb2_grpc.vpeServicer):
  """Provides methods that implement functionality of vpe relay server."""
  def __init__(self, vpp):
    self.vpp = vpp

  def show_version(self, request, context):
    rv = self.vpp.show_version(**grpcmsg_to_namedtuple(request))
    return vpe_pb2.show_version_reply(**vppmsg_to_namedtuple(rv))

def serve():
  # directory containing all the json api files.
  # if vpp is installed on the system, these will be in /usr/share/vpp/api/
  vpp_json_dir = os.environ['VPP'] + '/build-root/install-vpp_debug-native/vpp/share/vpp/api/core'

  # construct a list of all the json api files
  jsonfiles = []
  for root, dirnames, filenames in os.walk(vpp_json_dir):
      for filename in fnmatch.filter(filenames, '*.api.json'):
          jsonfiles.append(os.path.join(vpp_json_dir, filename))

  if not jsonfiles:
      print('Error: no json api files found')
      exit(-1)

  vpp = VPP(jsonfiles)

  r = vpp.connect("grpc_relay_server")
  print(r)

  server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
  vpe_pb2_grpc.add_vpeServicer_to_server(
      vpeServicer(vpp), server)
  server.add_insecure_port('[::]:50051')
  server.start()
  try:
    while True:
      time.sleep(_ONE_DAY_IN_SECONDS)
  except KeyboardInterrupt:
    server.stop(0)
  exit(vpp.disconnect())

if __name__ == '__main__':
  serve()
